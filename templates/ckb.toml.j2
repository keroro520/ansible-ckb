data_dir = "{{ ckb_data_dir | default("/var/lib/ckb/data") }}"

[chain]
{# Choose the kind of chains to run, possible values: #}
{# - { file = "specs/dev.toml" }                      #}
{# - { bundled = "specs/testnet.toml" }               #}
{# - { bundled = "specs/mainnet.toml" }               #}
{# spec = {{ ckb_chain_spec_bundled | '{' file = "specs/dev.toml" '}'  }} #}
{# spec = "{{ ckb_chain_spec_bundled | ckb_chain_spec_file  }}" #}

# `ckb_chain_spec` variable created at runtime
spec = {{ ckb_chain_spec }}

[logger]
filter = "{{ ckb_logger_filter | default("info") }}"
color = {{ ckb_logger_color | default("true") }}
log_to_file = {{ ckb_logger_log_to_file | default("true") }}
log_to_stdout = {{ ckb_logger_log_to_stdout | default("true") }}

[sentry]
# set to blank to disable sentry error collection
dsn = "{{ ckb_sentry_dsn | default("") }}"
# if you are willing to help us to improve,
# please leave a way to contact you when we have troubles to reproduce the errors.
org_contact = "{{ ckb_sentry_org_contact | default("") }}"

[db]
# The capacity of RocksDB cache, which caches uncompressed data blocks, indexes and filters, default is 128MB.
# Rocksdb will automatically create and use an 8MB internal cache if you set this value to 0.
# To turning off cache, you need to set this value to 0 and set `no_block_cache = true` in the options_file,
# however, we strongly discourage this setting, it may lead to severe performance degradation.
cache_size = {{ ckb_db_cache_size | default("134217728") }}

# Provide an options file to tune RocksDB for your workload and your system configuration.
# More details can be found in [the official tuning guide](https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide).
options_file = "default.db-options"

[network]
listen_addresses = {{ ckb_network_listen_addresses | default(["/ip4/0.0.0.0/tcp/8115"]) }}

### Specify the public and routable network addresses
public_addresses = {{ ckb_network_public_addresses | default([]) }}

# Node connects to nodes listed here to discovery other peers when there's no local stored peers.
# When chain.spec is changed, this usually should also be changed to the bootnodes in the new chain.
bootnodes = {{ ckb_network_bootnodes | default([]) }}

### Whitelist-only mode
whitelist_only     = {{ ckb_network_whitelist_only | default("false") }}
### Whitelist peers connecting from the given IP addresses
whitelist_peers    = {{ ckb_network_whitelist_peers | default([]) }}

max_peers          = {{ ckb_network_max_peers | default(125) }}
max_outbound_peers = {{ ckb_network_max_outbound_peers | default(8) }}
ping_interval_secs = {{ ckb_network_ping_interval_secs | default(120) }}
ping_timeout_secs  = {{ ckb_network_ping_timeout_secs | default(1200) }}
connect_outbound_interval_secs = {{ ckb_network_connect_outbound_interval_secs | default(15) }}
# If set to true, try to register upnp
upnp = {{ ckb_network_upnp | default("false") }}
# If set to true, network service will add discovered local address to peer store, it's helpful for private net development
discovery_local_address = {{ ckb_network_discovery_local_address | default("true") }}
# If set to true, random cleanup when there are too many inbound nodes
# Ensure that itself can continue to serve as a bootnode node
bootnode_mode = {{ ckb_network_bootnode_mode | default("false") }}

[rpc]
# By default RPC only binds to localhost, thus it only allows accessing from the same machine.
#
# Allowing arbitrary machines to access the JSON-RPC port is dangerous and strongly discouraged.
# Please strictly limit the access to only trusted machines.
listen_address = "{{ ckb_rpc_listen_address | default("127.0.0.1:8114") }}"

# Default is 10MiB = 10 * 1024 * 1024
max_request_body_size = {{ ckb_rpc_max_request_body_size | default(10485760) }}

# List of API modules: ["Net", "Pool", "Miner", "Chain", "Stats", "Subscription", "Experiment", "Debug"]
modules = {{ ckb_rpc_modules }}

# By default RPC only binds to HTTP service, you can bind it to TCP and WebSocket.
# tcp_listen_address = "127.0.0.1:18114"
# ws_listen_address = "127.0.0.1:28114"
reject_ill_transactions = {{ ckb_rpc_reject_ill_transactions | default("true") }}

# By default deprecated rpc methods are disabled.
enable_deprecated_rpc = {{ ckb_rpc_enable_deprecated_rpc | default("false") }}

[tx_pool]
max_mem_size = {{ ckb_tx_pool_max_mem_size | default("20_000_000") }}
max_cycles = {{ ckb_tx_pool_max_cycles | default("200_000_000_000") }}
max_verify_cache_size = {{ ckb_tx_pool_max_verify_cache_size | default("100_000") }}
max_conflict_cache_size = {{ ckb_tx_pool_max_conflict_cache_size | default("1_000") }}
max_committed_txs_hash_cache_size = {{ ckb_tx_pool_max_committed_txs_hash_cache_size | default("100_000") }}
min_fee_rate = {{ ckb_tx_pool_min_fee_rate | default("1_000") }}
max_tx_verify_cycles = {{ ckb_tx_pool_max_tx_verify_cycles | default("70_000_000") }}
max_ancestors_count = {{ ckb_tx_pool_max_ancestors_count | default("25") }}

[store]
header_cache_size          = {{ ckb_store_header_cache_size          | default("4096")}}
cell_data_cache_size       = {{ ckb_store_cell_data_cache_size       | default("128")}}
block_proposals_cache_size = {{ ckb_store_block_proposals_cache_size | default("30")}}
block_tx_hashes_cache_size = {{ ckb_store_block_tx_hashes_cache_size | default("30")}}
block_uncles_cache_size    = {{ ckb_store_block_uncles_cache_size    | default("30")}}
cellbase_cache_size        = {{ ckb_store_cellbase_cache_size        | default("30")}}

# [notifier]
# # Execute command when the new tip block changes, first arg is block hash.
# new_block_notify_script = "your_new_block_notify_script.sh"
# # Execute command when node received an network alert, first arg is alert message string.
# network_alert_notify_script = "your_network_alert_notify_script.sh"

# Set the lock script to protect mined CKB.
#
# CKB uses CS architecture for miner. Miner process (ckb miner) gets block
# template from the Node process (ckb run) via RPC. Thus the lock script is
# configured in ckb.toml instead of ckb-miner.toml, and the config takes effect
# after restarting Node process.
#
# The `code_hash` identifies different cryptography algorithm. Read the manual
# of the lock script provider about how to generate this config.
#
# CKB provides an secp256k1 implementation, it requires a hash on the
# compressed public key. The hash algorithm is blake2b, with personal
# "ckb-default-hash". The first 160 bits (20 bytes) are used as the only arg.
#
# You can use any tool you trust to generate a Bitcoin private key and public
# key pair, which can be used in CKB as well. CKB CLI provides the function for
# you to convert the public key into block assembler configuration parameters.
#
# Here is an example using ckb-cli to generate an account, this command will
# print the block assembler args(lock_arg) to screen:
#
#     ckb-cli account new
#
# If you already have a raw secp256k1 private key, you can get the lock_arg by:
#
#     ckb-cli util key-info --privkey-path <privkey-path>
#
# The command `ckb init` also accepts options to generate the block assembler
# directly. See `ckb init --help` for details.
#
#     ckb init <lock_arg>
#
# secp256k1_blake160_sighash_all example:

{% if ckb_block_assembler is defined %}
[block_assembler]
code_hash = "{{ ckb_block_assembler.code_hash }}"
args      = "{{ ckb_block_assembler.args      }}"
hash_type = "{{ ckb_block_assembler.hash_type }}"
message   = "{{ ckb_block_assembler.message   }}"
{% endif %}
